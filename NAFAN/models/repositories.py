from django import forms
from django.db import models
from django.forms import ModelForm
from django.conf import settings

from zipfile import ZipFile

import csv
import os

# Each contributor can be associated to multiple repositories and each repository can have multiple users
# There is some inclination to make the parent organization its own class in order to store information about
# the parent separate from the repository.  This would be acheived by a new class with the identifier id in the
# repository.  The RepoData, while having a parent field was sparsely populated for that field.

class Repository(models.Model):

    # An internal identifier is automatically generated by Django/PostgreSQL

    repository_name = models.CharField(verbose_name="Repository", max_length=255, blank=False)
    parent_organization = models.CharField(max_length=255, blank=True)
    
    # !!! Convert this into a dropdown from free text
    repository_type = models.CharField(max_length=255, blank=True)
    
    street_address_1 = models.CharField(max_length=255, blank=True)
    st_city = models.CharField(verbose_name="City", max_length=255, blank=True)
    st_zip_code_5_numbers = models.CharField(max_length=255, blank=True)
    state = models.CharField(max_length=255, blank=True)
    url = models.CharField(max_length=255, blank=True)
    latitude = models.CharField(max_length=255, blank=True)
    longitude = models.CharField(max_length=255, blank=True)
    notes = models.CharField(max_length=5096, blank=True)
    email = models.CharField(max_length=255, blank=True)
    phone = models.CharField(max_length=32, blank=True)
    status = models.CharField(max_length=32, blank=True)
    description = models.CharField(max_length=5096, blank=True)
    governing_access = models.CharField(max_length=5096, blank=True)

    elasticsearch_id = models.CharField(max_length=32, blank=True)

    # These are some test fields that may or may not need to be in the final solution
    snac_permalink = models.CharField(max_length=255, blank=True)
    harvest_location = models.CharField(max_length=255, blank=True)
    DPLA = models.CharField(max_length=255, blank=True)

    # Legacy RepoData information.  Some of this night be useful such as street_address_2 or po_box
    repo_id = models.CharField(max_length=255, blank=True)
    name_notes = models.CharField(max_length=255, blank=True)
    repository_name_authorized = models.CharField(max_length=255, blank=True)
    repository_identifier_authorized = models.CharField(max_length=255, blank=True)
    location_type = models.CharField(max_length=255, blank=True)
    street_address_2 = models.CharField(max_length=255, blank=True)
    po_box = models.CharField(max_length=255, blank=True)
    st_zip_code_4_following_numbers = models.CharField(max_length=255, blank=True)
    street_address_county = models.CharField(max_length=255, blank=True)
    language_of_entry = models.CharField(max_length=255, blank=True)
    date_entry_recorded = models.CharField(max_length=255, blank=True)
    entry_recorded_by = models.CharField(max_length=255, blank=True)
    source_of_repository_data = models.CharField(max_length=255, blank=True)
    url_of_source_of_repository_data = models.CharField(max_length=255, blank=True)
    geocode_confidence = models.CharField(max_length=255, blank=True)

    def __str__(self):
        return self.repository_name

    # This function assumes the RepoData file has been de-duplicated
    def handle_RepoData_upload(filepath):

        response = "OK"
        Repository.objects.all().delete()

        with open(filepath, newline='', encoding="utf8") as csvfile:
            try:

                name = ""
                count = 0

                reader = csv.DictReader(csvfile)
                for row in reader:

                    name = row['repository_name_unauthorized']

                    repository = Repository()
                    repository.repo_id = row['id']
                    repository.repository_name = row['repository_name_unauthorized'].replace("\n", " ")
                    repository.name_notes = row['name_notes']
                    repository.parent_organization = row['parent_org_unauthorized']
                    repository.repository_name_authorized = row['repository_name_authorized']
                    repository.repository_identifier_authorized = row['repository_identifier_authorized']
                    repository.repository_type = row['repository_type']
                    repository.location_type = row['location_type']
                    repository.street_address_1 = row['street_address_1']
                    repository.street_address_2 = row['street_address_2']
                    repository.po_box = row['po_box']
                    repository.st_city = row['st_city']
                    repository.st_zip_code_5_numbers = row['st_zip_code_5_numbers']
                    repository.st_zip_code_4_following_numbers = row['st_zip_code_4_following_numbers']
                    repository.street_address_county = row['street_address_county']
                    repository.state = row['state']
                    repository.url = row['url']
                    repository.latitude = row['latitude']
                    repository.longitude = row['longitude']
                    repository.language_of_entry = row['language_of_entry']
                    repository.date_entry_recorded = row['date_entry_recorded']
                    repository.entry_recorded_by = row['entry_recorded_by']
                    repository.source_of_repository_data = row['source_of_repository_data']
                    repository.url_of_source_of_repository_data = row['url_of_source_of_repository_data']
                    repository.notes = row['notes']
                    repository.geocode_confidence = row['geocode_confidence']

                    count = count + 1
                    try:
                        repository.save()
                    except Exception as e:
                        response = "Exception " + repository.repository_name + " " + str(e)
                        return response

                response = str(count) + " institutes found"
            except Exception as e:
                response = "Unable to process the " + filepath + " file after " + name + " " + str(e)

        return response

    def GetRepositoryByID(id):
        return Repository.objects.get(id=id)

    # This procedure is problematic and needs to be discontinued.
    # It was written and used with the assumption that repository names would be unique.
    # That has yet to be determined, but likely will not be the case
    def GetRepositoryByName(name):
        return Repository.objects.get(repository_name=name)

    def GetRepositories(searchField, searchTerm, status):
        results = []
        if status == "Unresearched":
            status = ""

        if status == "All":
            if searchTerm:
                if searchField == "Repository":
                        results = Repository.objects.filter(repository_name__icontains=searchTerm).order_by('repository_name')
                else:
                    if searchField == "City":
                        results = Repository.objects.filter(st_city__icontains=searchTerm).order_by('state')
                    else:
                        results = Repository.objects.filter(state__icontains=searchTerm).order_by('st_city')
            else:
                return Repository.objects.all().order_by('repository_name')[:50]
        else:
            if searchTerm:
                if searchField == "Repository":
                        results = Repository.objects.filter(repository_name__icontains=searchTerm).filter(status=status).order_by('repository_name')
                else:
                    if searchField == "City":
                        results = Repository.objects.filter(st_city__icontains=searchTerm).filter(status=status).order_by('state')
                    else:
                        results = Repository.objects.filter(state__icontains=searchTerm).filter(status=status).order_by('st_city')
            else:
                return Repository.objects.all().order_by('repository_name')[:50]

        return results

    def GetUserRepositories(email):

        list = []

        userRepositories = User_Repositories.GetRepositories(email)
        for repository in userRepositories:
            list.append(Repository.GetRepositoryByID(repository.repository_id))

        return list

    def ExportRepositories():

        results = Repository.objects.all().order_by('repository_name')

        try:
            export_file = csv.writer(open('RepoExport.csv', 'w', newline='', encoding="utf8"))
            Repository.WriteExportHeader(export_file)

            # The `iterator()` method ensures only a few rows are fetched from
            # the database at a time, saving memory.
            for result in results.iterator():
                Repository.WriteExportEntry(export_file, result)

        except Exception as e:
            print(e)

    def WriteExportHeader(export_file):

        export_file.writerow(['id', 'repository_name_unauthorized', 'name_notes', 'parent_org_unauthorized', 'repository_name_authorized', \
                        'repository_identifier_authorized', 'repository_type', 'location_type', 'street_address_1', 'street_address_2', 'po_box', \
                        'st_city', 'st_zip_code_5_numbers', 'st_zip_code_4_following_numbers', 'street_address_county', 'po box', 'state', \
                        'email', 'phone', 'status', 'description', \
                        'url', 'latitude', 'longitude', 'language_of_entry', 'date_entry_recorded', 'entry_recorded_by', 'source_of_repository_data', \
                        'url_of_source_of_repository_data', 'notes', 'geocode_confidence'])

    def WriteExportEntry(file, row):

        id =  row.id
        repository_name = row.repository_name
        name_notes = row.name_notes
        parent_organization = row.parent_organization
        repository_name_authorized = row.repository_name_authorized
        repository_identifier_authorized = row.repository_identifier_authorized
        repository_type = row.repository_type
        location_type = row.location_type
        street_address_1 = row.street_address_1
        street_address_2 = row.street_address_2
        st_city = row.st_city
        st_zip_code_5_numbers = row.st_zip_code_5_numbers
        st_zip_code_4_following_numbers = row.st_zip_code_4_following_numbers
        street_address_county = row.street_address_county
        po_box = row.po_box
        state = row.state
        url = row.url
        latitude = row.latitude
        longitude = row.longitude
        language_of_entry = row.language_of_entry
        date_entry_recorded = row.date_entry_recorded
        entry_recorded_by = row.entry_recorded_by
        source_of_repository_data = row.source_of_repository_data
        url_of_source_of_repository_data = row.url_of_source_of_repository_data
        notes = row.notes
        geocode_confidence = row.geocode_confidence
        email =  row.email
        phone =  row.phone
        status =  row.status
        description =  row.description

        file.writerow([id, repository_name, name_notes, parent_organization, repository_name_authorized, \
                        repository_identifier_authorized, repository_type, location_type, street_address_1, street_address_2, po_box,\
                        st_city, st_zip_code_5_numbers, st_zip_code_4_following_numbers, street_address_county, po_box, state, \
                        email, phone, status, description, \
                        url, latitude, longitude, language_of_entry, date_entry_recorded, entry_recorded_by, source_of_repository_data, \
                        url_of_source_of_repository_data, notes, geocode_confidence])

##############################

class RepositoryForm(ModelForm):
    class Meta:
        model = Repository
        fields = '__all__'

        widgets = {
            'repository_name': forms.TextInput(attrs={'class': 'form-control large_field'}),
            'url': forms.TextInput(attrs={'class': 'form-control large_field'}),
            'email': forms.TextInput(attrs={'class': 'form-control large_field'}),
            'notes': forms.Textarea(attrs={'class': 'form-control large_field'}),
            'parent_organization': forms.TextInput(attrs={'class': 'form-control large_field'}),
            'repository_type': forms.TextInput(attrs={'class': 'form-control large_field'}),
            'street_address_1': forms.TextInput(attrs={'class': 'form-control large_field'}),
            'st_city': forms.TextInput(attrs={'class': 'form-control large_field'}),
            'state': forms.TextInput(attrs={'class': 'form-control large_field'}),
            'st_zip_code_5_numbers': forms.TextInput(attrs={'class': 'form-control large_field'}),
            'phone': forms.TextInput(attrs={'class': 'form-control large_field'}),
            'status': forms.TextInput(attrs={'class': 'form-control large_field'}),
            'description': forms.Textarea(attrs={'class': 'form-control large_field'}),
            'snac_permalink': forms.TextInput(attrs={'class': 'form-control large_field'}),
            'DPLA': forms.TextInput(attrs={'class': 'form-control large_field'}),
            'harvest_location': forms.TextInput(attrs={'class': 'form-control large_field'}),
            'latitude': forms.TextInput(attrs={'class': 'form-control large_field'}),
            'longitude': forms.TextInput(attrs={'class': 'form-control large_field'}),
            'governing_access': forms.Textarea(attrs={'class': 'form-control large_field'}),
        }

##############################

class User_Repositories(models.Model):

    user_name = models.CharField(max_length=255, blank=False)
    repository_id = models.IntegerField()
    repository_name = models.CharField(max_length=255, blank=False)
    st_city = models.CharField(max_length=255, blank=True)
    state = models.CharField(max_length=255, blank=True)

    def __str__(self):
        return self.repository_name

    def GetRepositories(username):
        return User_Repositories.objects.filter(user_name=username).order_by('repository_name')

    def GetRepositoriesSearch(searchField, searchTerm):
        if searchTerm:
            if searchField == "repository_name":
                return Repository.objects.filter(repository_name__contains=searchTerm).order_by('repository_name')
            if searchField == "st_city":
                return Repository.objects.filter(st_city=searchTerm).order_by('repository_name')
            if searchField == "state":
                return Repository.objects.filter(state=searchTerm).order_by('repository_name')
        else:
            return Repository.objects.filter(repository_id='XXXXX')

    def GetUsers(repository_id):
        return User_Repositories.objects.filter(repository_id=repository_id).order_by('user_name')

    def AssignRepository(username, repository_name):
        assignment = User_Repositories()
        assignment.user_name = username
        assignment.repository_name = repository_name

        repository = Repository.GetRepositoryByName(repository_name)
        assignment.repository_id = repository.id
        assignment.st_city = repository.st_city
        assignment.state = repository.state
        
        assignment.save()

        return True

    def RemoveRepository(username, repository_name):
        User_Repositories.objects.filter(user_name=username).filter(repository_name=repository_name).delete()

##############################

class UploadFileForm(forms.Form):
    # title = forms.CharField(max_length=50)
    file = forms.FileField(widget=forms.ClearableFileInput(attrs={'multiple': True}))


def extract_uploaded_zip(filename):

    # opening the zip file in READ mode
    with ZipFile(filename, 'r') as zip:

        zip.extractall(os.path.join(settings.BASE_DIR, 'uploads'))

    os.remove(filename)
    return filename


def save_uploaded_file(f):
    filename = os.path.join(settings.BASE_DIR, 'media', f.name)
    with open(filename, 'wb') as destination:
        for chunk in f.chunks():
            destination.write(chunk)
    return filename